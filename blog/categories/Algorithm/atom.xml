<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | 蛰渊-成长的轨迹]]></title>
  <link href="http://hiberabyss.github.io/blog/categories/Algorithm/atom.xml" rel="self"/>
  <link href="http://hiberabyss.github.io/"/>
  <updated>2014-08-12T17:09:48+08:00</updated>
  <id>http://hiberabyss.github.io/</id>
  <author>
    <name><![CDATA[hiberabyss]]></name>
    <email><![CDATA[liuhb90@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014面试题]]></title>
    <link href="http://hiberabyss.github.io/blog/20140812/interviewproblems/"/>
    <updated>2014-08-12T14:51:00+08:00</updated>
    <id>http://hiberabyss.github.io/blog/20140812/interviewproblems</id>
    <content type="html"><![CDATA[<p>根据同学面试经历总结，解答仅供参考。(by hiberabyss)</p>

<!--more-->

<h2 id="section">目录</h2>
<ul>
  <li><a href="#s1">算法相关</a></li>
  <li><a href="#s2">海量数据问题</a></li>
  <li><a href="#s3">操作系统相关</a></li>
</ul>

<h3 id="s1">算法相关</h3>

<h4 id="on">给定完全二叉树，求最后一层最右节点。要求时间复杂度小于<code>O(N)</code>（赵子汉——百度二面）</h4>
<ul>
  <li>直接对二叉树进行层次遍历，用<code>last</code>变量记录每次访问的值，遍历完成直接返回<code>last</code>即可；时间复杂度为<code>O(N)</code>。</li>
  <li>采用递归的思路：
    <ul>
      <li>结束条件：如果根节点为叶子节点，即为所求，直接返回；</li>
      <li>如果左子树高度大于右子树，则最右节点在左子树；</li>
      <li>如果左子树高度等于右子树，则最右节点在右子树。</li>
    </ul>
  </li>
</ul>

<p>因为是完全二叉树，树的高度可以通过从根节点不断往左遍历求得，递归也可以很方便的用迭代的方法来实现，时间复杂度为<code>O(logN*logN)</code>。代码如下：</p>

<p>```c++
TreeNode *getRightMost(TreeNode *root) {
    if ( !root ) return root;</p>

<pre><code>while ( root-&gt;left || root-&gt;right ) {
    int lh = 0;
    TreeNode *tmp = root-&gt;left;
    while ( tmp ) lh++, tmp = tmp-&gt;left;

    int rh = 0;
    tmp = root-&gt;right;
    while ( tmp ) rh++, tmp = tmp-&gt;left;

    if ( lh == rh ) root = root-&gt;right;
    else root = root-&gt;left;
}

return root; } ```
</code></pre>

<h4 id="reverse">给定一个链表内的两个指针，对指针间的节点做<code>reverse</code>（李强强——百度电面）</h4>
<ul>
  <li>通过交换节点数据来实现翻转，时间复杂度为<code>O(N)</code>，空间复杂度为<code>O(N)</code>；代码如下：</li>
</ul>

<p>```c++
struct ListNode {
    ListNode *next;
    int val;
}</p>

<p>void reverseNodes(ListNode *p1, ListNode *p2) {
    if ( !p1 || !p2 ) return;</p>

<pre><code>vector&lt;ListNode*&gt; nodes;
for ( auto node = p1; ; node = node-&gt;next ) {
    nodes.push_back(node);
    if ( node == p2 ) break;
}

int i = 0;
int j = nodes.size() - 1;
while ( i&lt;j ) swap(nodes[i++]-&gt;val, nodes[j--]-&gt;val); }
</code></pre>

<p>```</p>

<ul>
  <li>按照要求翻转的是指针之间的节点（不包括p1和p2）的方式理解的话，可以通过更改链表指针在<code>O(N)</code>的时间复杂度和<code>O(1)</code>的空间复杂度内解决；（如果包含p1和p2，也可以先交换p1和p2的值，便可转化为这种情况），代码如下：</li>
</ul>

<p>```c++
void reverseNodes(ListNode *p1, ListNode *p2) {
    if ( !p1 || !p1-&gt;next ) return;
    auto pre = p1-&gt;next;
    auto cur = pre-&gt;next;</p>

<pre><code>while ( cur != p2 &amp;&amp; cur ) {
    auto tmp = cur-&gt;next;
    cur-&gt;next = pre;
    pre = cur;
    cur = tmp;
}

p1-&gt;next-&gt;next = cur;
p1-&gt;next = pre; } ```
</code></pre>

<h4 id="section-1">随机数相关算法</h4>
<p>该类算法的思路在于先由给定随机数生成器生成一个序列，剔除一部分数，由剩下的序列来生成要求的结果。</p>

<ul>
  <li>给定随机数生成器<code>rand1p</code>，以概率<code>p</code>生成1，以概率<code>1-p</code>生成0，设计<code>rand1</code>，等概率生成0和1 ( 思路：两个<code>rand1p</code>之和为0或2的概率相等 )</li>
</ul>

<p>```c++
int rand1() {
    int res = 0;</p>

<pre><code>do {
    res = rand1p() + rand1p();
} while ( res == 1 );

return res/2; } ```   
</code></pre>

<ul>
  <li>给定<code>rand5</code>（等概率生成1-5），设计<code>rand7</code>（等概率生成1-7）（思路：由两个<code>rand5</code>组成一个2位的5进制数，则可等概率生成序列0-24，剔除最后4个数，则可得到一个有21个数的等概率序列）</li>
</ul>

<p>```c++
int rand7() {
    int res = 0;
    do {
        res = 5 * (rand5() - 1) + rand5() - 1;
    } while ( res &gt; 20 );</p>

<pre><code>return (res%7) + 1; } ```
</code></pre>

<h4 id="k">找第K个数</h4>

<h4 id="section-2">两个有序数组求中位数</h4>

<h4 id="inplace-mergesort">Inplace MergeSort</h4>

<h4 id="section-3">非递归快排</h4>

<h2 id="s2">海量数据问题</h2>
<p>这篇<a href="http://www.cnblogs.com/gw811/archive/2012/10/11/2719232.html">博客</a>总结的挺好的。</p>

<h4 id="nunsigned-intn">求N个整数（unsigned int）的中位数，N很大（强强——百度电面）</h4>
<ul>
  <li>用外排序的方法排好序，返回第<code>N/2</code>个元素，时间复杂度<code>O(N*logN)</code></li>
  <li>类似桶排序的思想；对整数区间进行划分（例如划分为16个区间：0 ~ 2^28 - 1, …, 15*2^28 ~ 2^32 - 1），遍历所有整数，把属于同一个区间内的整数写到同一个文件中，并统计整数数量（N0, N1, …, N7)，找到k，使得<code>sum{N0~Nk} &gt;= N/2</code>且<code>sum{N0~Nk-1} &lt; N/2</code>，则该问题转化为求第k个区间内的整数的第<code>N/2-sum{N0~Nk-1}</code>个数的问题。如果区间内的整数还是太多，则可以对区间再做进一步细分，重复上述过程。</li>
</ul>

<h3 id="s3">操作系统相关</h3>

<h4 id="shell">shell的实现原理（中海——百度一面）</h4>
<ul>
  <li>读取输入，fork出新的进程，在子进程中调用<code>exec</code>运行相应程序。</li>
</ul>
]]></content>
  </entry>
  
</feed>
