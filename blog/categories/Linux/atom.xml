<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 蛰渊-成长的轨迹]]></title>
  <link href="http://hiberabyss.github.io/blog/categories/Linux/atom.xml" rel="self"/>
  <link href="http://hiberabyss.github.io/"/>
  <updated>2013-08-27T14:02:17+08:00</updated>
  <id>http://hiberabyss.github.io/</id>
  <author>
    <name><![CDATA[hiberabyss]]></name>
    <email><![CDATA[liuhb90@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu的一些配置方法]]></title>
    <link href="http://hiberabyss.github.io/blog/20130716/ubuntu/"/>
    <updated>2013-07-16T20:19:00+08:00</updated>
    <id>http://hiberabyss.github.io/blog/20130716/ubuntu</id>
    <content type="html"><![CDATA[<p>以Ubuntu为主的对Linux的一些配置，标记通用则表示也适用于其他Linux版本。</p>

<!--more-->

<h2 id="deepin">安装deepin软件</h2>
<p>将如下源添加到<code>/etc/apt/sources.list</code>即可（注意不要<code>sudo apt-get upgrade</code>，否则会变成deepin源里的包:(）</p>

<p><code>bash
deb http://mirrors.ustc.edu.cn/deepin/ raring main non-free
</code></p>

<p>然后安装音乐和视频播放器：</p>

<p><code>bash
#需要先安装如下包
sudo apt-get install python-deepin-gsettings
sudo apt-get install deepin-music-player
sudo apt-get install deepin-media-player
</code></p>

<ul>
  <li><a href="http://www.bentutu.com/ubuntu-add-linuxdeepin-repo.html">Ubuntu 13.04安装Linux Deepin特色软件</a></li>
</ul>

<h2 id="section">软件卸载及修复</h2>
<p>用<code>apt-get remove</code>卸载时会卸载相应的依赖的包，可以用<code>dpkg --force-all -r package</code>进行强制卸载。</p>

<p>如果不小心卸载了许多包，可以查看<code>/var/log/apt/history.log</code>文件，根据日志记录信息进行修复。</p>

<h2 id="section-1">自动更新</h2>
<ul>
  <li><a href="http://my.oschina.net/yangphere/blog/131165">Chrome自动更新</a></li>
</ul>

<h2 id="section-2">修改登陆显示信息</h2>
<p>tty里的第一行显示的是<code>/etc/issue</code>里的内容。 <br />
可以修改<code>/etc/lsb-release</code>里的信息。 <br />
修改<code>/etc/update-motd.d/</code>文件夹里的内容可以更改登陆之后的显示信息，可以用命令<code>sudo run-parts /etc/update-motd.d/</code>来预览。  </p>

<p>ubuntu登录主题相关包<code>plymouth</code></p>

<ul>
  <li><a href="http://blog.csdn.net/mal327/article/details/6595796">Ubuntu的登陆和欢迎信息控制</a></li>
</ul>

<h2 id="update-initramfs">内核编译update-initramfs</h2>
<p>编译了一次<code>linux-3.10.1</code>，卸载之后，每次运行<code>update-initramfs</code>都会自动在<code>boot</code>目录下生成<code>initramfs-3.10.1</code>文件，删除<code>/var/lib/initramfs-tools/</code>下相应文件即可。</p>

<h2 id="section-3">时间设置（通用）</h2>
<p>利用<code>ntpdate</code>进行时间同步，需已安装包<code>ntp</code>：</p>

<p><code>
ntpdate us.pool.ntp.org
</code></p>

<p>修改时区：</p>

<p><code>
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></p>

<h2 id="section-4">调整分辨率</h2>

<p><code>bash
#设置自动调整
#LVDS1为一种显示模式，直接运行xrandr可显示当前可用的模式
xrandr --output LVDS1 --auto
</code></p>

<h2 id="section-5">切换输入法</h2>

<p><code>bash
im-switch -c
</code></p>

<h2 id="ezame">利用ezame调整右键菜单</h2>
<p>搜索到<code>Wine Windowns Program Loader</code>项目，把<code>No Display</code>选项关闭（这样便可以在右键菜单选择默认程序时出现该程序），在<code>Exec</code>参数前加上<code>env LANG="zh_CN.UTF-8"</code>。</p>

<h2 id="uuid">查看UUID</h2>

<p><code>bash
sudo blkid
ls -l /dev/disk/by-uuid/
</code></p>

<h2 id="linux">编译Linux内核</h2>

<p><code>bash
#查看帮助文档
make help
#参考当前内核加载的模块生成config文件
make localmodinstall
make
#将生成的模块复制到 /lib/modules/version 目录下
make modules_install
#生成内核文件、initrd文件等，并复制到 /boot/ 目录下
make install
#以上四步即可完成内核的编译与安装
</code></p>

<h2 id="cache">手动清除cache内存</h2>

<p><code>bash
sync
echo 3 &gt; /proc/sys/vm/drop_caches
#To free pagecache, use 
echo 1 &gt; /proc/sys/vm/drop_caches
#to free dentries and inodes, use
echo 2 &gt; /proc/sys/vm/drop_caches
#to free pagecache, dentries and inodes, use 
echo 3 &gt; /proc/sys/vm/drop_caches
#Because this is a non-destructive operation and dirty objects
#are not freeable, the user should run sync first.
</code></p>

<ul>
  <li><a href="http://www.linuxany.com/archives/814.html">手工释放linux内存</a></li>
</ul>

<h2 id="section-6">代理上网</h2>
<p>只要把网关和DNS地址设置为能上外网的电脑的ip地址即可。</p>

<h2 id="section-7">参考资料</h2>
<ul>
  <li><a href="http://www.linuxde.net/2013/06/14506.html">教你在不同机器间迁移Linux</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS常用配置]]></title>
    <link href="http://hiberabyss.github.io/blog/20130711/centos/"/>
    <updated>2013-07-11T19:47:00+08:00</updated>
    <id>http://hiberabyss.github.io/blog/20130711/centos</id>
    <content type="html"><![CDATA[<p>本文记录对CentOS的一些配置方法。</p>

<!--more-->

<h2 id="section">包管理</h2>
<p><code>
#安装包
rpm -ivh your.rpm --force --nodeps
#升级包
rpm -Uvh your.rpm --force --nodeps
#卸载包
rpm -e --nodeps uninstall.rpm
#查询已安装的包
rpm -qa pattern
</code></p>

<h2 id="section-1">服务管理</h2>
<p><code>
#设置服务开机启动
chkconfig the-service on
#查询某个服务开启状态
chkconfig --list the-service
</code></p>

<h2 id="section-2">修改主机名</h2>

<p><code>
#临时设置主机名为the-name，重启后失效；需要重新登陆
hostname the-name
</code></p>

<p>编辑文件<code>/etc/sysconfig/network</code>，对如下字段做修改：</p>

<p><code>
HOSTNAME=the-name
</code></p>

<h2 id="section-3">网络接口配置</h2>
<p>修改<code>/etc/sysconfig/network-scripts/ifconfig-eth0</code>文件进行相应的网络设置，其中<code>eth0</code>可以用相应的网络接口名称代替，如果相应的文件不存在，则可以创建一个新的文件：</p>

<p><code>bash
DEVICE="eth0"
BOOTPROTO="static"
HWADDR="网卡物理地址"
#如果BOOTPROTO设置为dhcp，则不需要下面的设置
IPADDR=ip地址
NETMASK=子网掩码
GATEWAY=网关
</code></p>

<p>修改文件<code>/etc/resolv.conf</code>可以配置DNS服务器：</p>

<p><code>
#国内公用DNS服务器
nameserver 114.114.114.114
#Google公用dns服务器
nameserver 8.8.8.8
nameserver 8.8.4.4
</code></p>

<p>修改文件<code>/etc/udev/rules.d/70-persistent-net.rules</code>可以根据相应的<code>mac</code>地址修改网络接口的显示名称。</p>

<h2 id="section-4">本地源</h2>
<p>将iso文件挂载到目录<code>/mnt/iso</code>，并写入到文件<code>/etc/fstab</code>中</p>

<p><code>
mount -o loop /root/iso/CentOS-6.3-x86_64-bin-DVD1.iso /mnt/dvd1/
</code></p>

<p>新建文件<code>/etc/yum.repos.d/locale.repo</code>文件，写入一下内容：</p>

<p><code>
[locale]
name=CentOS-6.3 - DVD1
baseurl=file:///mnt/dvd1/ file:///mnt/dvd2/
enable=1
gpcheck=1
gpgkey=file:///mnt/dvd1/RPM-GPG-KEY-CentOS-6
</code></p>

<p>把目录<code>/etc/yum.repos.d/</code>下<code>CentOS-Base.repo</code>文件和<code>CentOS-Debuginfo.repo</code>文件更改后缀名，否则会报错。</p>

<p>或者利用如下方式使用<code>yum</code></p>

<p><code>
#只使用本地源
yum --disablerepo=/* --enablerepo=locale install
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux目录的可执行权限]]></title>
    <link href="http://hiberabyss.github.io/blog/20130704/directory-execute-bit/"/>
    <updated>2013-07-04T10:37:00+08:00</updated>
    <id>http://hiberabyss.github.io/blog/20130704/directory-execute-bit</id>
    <content type="html"><![CDATA[<p>Linux目录必须要有可执行权限，此时<code>x</code>字段并不是真的代表可执行，而只是被重利用，用来表示在路径搜索中是否允许进行搜索，因此目录的<code>x</code>字段又被称为<code>search permision</code>字段。</p>

<!--more-->

<p>例如，当搜索目录<code>/path/to/file</code>时，如果目录<code>to</code>没有可执行权限，则在搜索<code>to</code>目录之前会首选判断<code>x</code>字段是否置位，如果没有，则提示没有权限。但如果有<code>to</code>目录的读取权限，还是可以显示<code>to</code>目录的内容的。</p>

<p>在用<code>cd dir</code>切换目录时，需要<code>dir</code>目录具有可执行权限，否则会提示权限错误。</p>

<ul>
  <li><a href="http://www.cnblogs.com/frydsh/archive/2013/01/15/2862066.html">参考资料</a></li>
  <li><a href="http://bbs.51cto.com/thread-886747-1.html">Linux文件权限学习总结</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bash编程的一些总结]]></title>
    <link href="http://hiberabyss.github.io/blog/20130628/bash-summary/"/>
    <updated>2013-06-28T11:51:00+08:00</updated>
    <id>http://hiberabyss.github.io/blog/20130628/bash-summary</id>
    <content type="html"><![CDATA[<p>对shell编程的一些总结，直接使用代码进行示例。</p>

<!--more-->

<h2 id="section">自动补全</h2>
<p>编辑如下的文件：</p>

<ul>
  <li><a href="http://marlonyao.iteye.com/blog/695225">自定义Bash自动完成</a></li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash_completion </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>
</span><span class='line'>_octopress_completion<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">local </span>cur
</span><span class='line'>  <span class="nv">COMPREPLY</span><span class="o">=()</span>
</span><span class='line'>  <span class="nv">cur</span><span class="o">=</span><span class="k">${</span><span class="nv">COMP_WORDS</span><span class="p">[COMP_CWORD]</span><span class="k">}</span>
</span><span class='line'>  <span class="nv">COMPREPLY</span><span class="o">=(</span><span class="k">$(</span> <span class="nb">compgen</span> -W <span class="s1">&#39;new_post gen_deploy lgdeploy&#39;</span> -- <span class="nv">$cur</span> <span class="k">)</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return </span>0
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">complete</span> -F _octopress_completion octo-rake
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>并用<code>. bash_completion</code>导入即可，则在输入<code>octo-rake</code> 后按<code>Tab</code>键即可自动补全。</p>

<h2 id="section-1">相关文档</h2>
<ul>
  <li>一篇会很有用的文章<a href="http://tech.idv2.com/2008/01/09/bash-pitfalls/">Bash的陷阱</a>，抽时间好好看一下。bash的帮助文档很详细，所有的东西都可以从里面找到，要了解该帮助文档的组织结构。</li>
  <li><a href="http://kodango.com/simple-bash-programming-skills-2">简洁的Bash编程技巧续篇</a></li>
  <li><a href="http://www.csdn.net/article/2013-08-15/2816581-What-I-learned-from-other-s-shell-scripts">我从其他Shell脚本中学到了什么</a></li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>	<span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#默认会执行“~/.profile”、“~/.bashrc”脚本文件</span>
</span><span class='line'>
</span><span class='line'><span class="c">#man bash可以查看到详细的帮助文档</span>
</span><span class='line'><span class="c">#一些命令参数：</span>
</span><span class='line'><span class="c">#-n: 测试语法是否正确，不执行</span>
</span><span class='line'><span class="c">#-x: 显示所执行的每一条命令</span>
</span><span class='line'><span class="c">#-c &quot;string&quot;: 从string中读取命令</span>
</span><span class='line'><span class="c">#-l: 以登录shell运行，区别是读取的配置文件不同，具体可参见man bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#取消相应参数</span>
</span><span class='line'><span class="nb">set</span> +x
</span><span class='line'><span class="c">#设置相应选项</span>
</span><span class='line'><span class="nb">set</span> -x
</span><span class='line'>
</span><span class='line'><span class="c">#特殊的参数，man bash中“Special Parameters”中有详细介绍：</span>
</span><span class='line'><span class="c"># $#:表示输入参数的个数，在Linux中常用#表示数字</span>
</span><span class='line'><span class="c"># $*:所有参数的字符串，分隔符和“IFS”有关，和$@的区别还没有搞清楚</span>
</span><span class='line'><span class="c"># $@:和上面功能类似</span>
</span><span class='line'><span class="c"># $?:上一条命令的返回状态</span>
</span><span class='line'>
</span><span class='line'>usage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">printf</span> <span class="s2">&quot;%b&quot;</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">    </span>
</span><span class='line'><span class="s2">Usage</span>
</span><span class='line'><span class="s2">  example [options] [action]</span>
</span><span class='line'><span class="s2">Options</span>
</span><span class='line'>
</span><span class='line'><span class="s2">Examples</span>
</span><span class='line'>
</span><span class='line'><span class="s2">Actions</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#参数处理</span>
</span><span class='line'><span class="c">#关于for语句等流程控制语句的详细用法参考man bash的“Compound Commands”部分</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="o">((</span> <span class="nv">$# </span>&gt; 0 <span class="o">))</span>; <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">token</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="nb">shift</span>
</span><span class='line'><span class="nb">  </span><span class="k">case</span> <span class="s2">&quot;$token&quot;</span> in
</span><span class='line'>    --help|-h<span class="o">)</span>
</span><span class='line'>      <span class="nb">echo</span> <span class="s2">&quot;haha,help&quot;</span>
</span><span class='line'>      ;;
</span><span class='line'>    --nodebug|-n<span class="o">)</span>
</span><span class='line'>      <span class="nb">set</span> +x
</span><span class='line'>      ;;
</span><span class='line'>    *<span class="o">)</span>
</span><span class='line'>      usage
</span><span class='line'>      <span class="nb">exit </span>1
</span><span class='line'>      ;;
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nv">sum</span><span class="o">=</span>0
</span><span class='line'><span class="c">#((expression))用于算术运算和比较，等同于let &quot;expression&quot;</span>
</span><span class='line'><span class="c">#如果expression非0，则返回0,否则返回1</span>
</span><span class='line'><span class="c">#关于运算符详细信息参见：ARITHMETIC EVALUATION</span>
</span><span class='line'><span class="k">for</span> <span class="o">((</span> <span class="nv">i</span><span class="o">=</span>1;i&lt;<span class="o">=</span>10;i++ <span class="o">))</span>; <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nv">sum</span><span class="o">=</span><span class="k">$((</span>sum <span class="o">+</span> i<span class="k">))</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$sum</span>
</span><span class='line'>
</span><span class='line'><span class="c">#[[ ]]和[ ]功能类似，但功能更强大，支持字符串的比较 </span>
</span><span class='line'><span class="nv">SPECIAL_DAY</span><span class="o">=</span><span class="s2">&quot;2012-07-07&quot;</span>
</span><span class='line'><span class="nv">ADD2YEARS</span><span class="o">=</span><span class="sb">`</span>date -d <span class="s2">&quot;$SPECIAL_DAY 2 years&quot;</span> +%F<span class="sb">`</span>
</span><span class='line'><span class="nv">TODAY</span><span class="o">=</span><span class="sb">`</span>date +%F<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$TODAY</span> &lt; <span class="nv">$SPECIAL_DAY</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;today is before special day&quot;</span>
</span><span class='line'><span class="c">#&#39;string&#39;会显示所有的字符串，不区分特殊字符，除了&#39;</span>
</span><span class='line'><span class="k">elif</span> <span class="o">[[</span> <span class="nv">$TODAY</span> &lt; <span class="nv">$ADD2YEARS</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s1">&#39;$ADD2YEARS is &#39;</span> <span class="nv">$ADD2YEARS</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;the last one&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 2&gt; /dev/zero 对stderr进行重定向</span>
</span><span class='line'><span class="c"># &gt; /dev/zero 对输出进行重定向</span>
</span><span class='line'><span class="c">#详情参见：REDIRECTION</span>
</span><span class='line'><span class="k">if </span>ls /mytest 2&gt; /dev/zero ; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s1">&#39;excute correct&#39;</span>
</span><span class='line'><span class="k">elif </span>ls /home &gt; /dev/zero ; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s1">&#39;/home exists&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#详细条件判断参考：CONDITIONAL EXPRESSIONS</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -d <span class="s2">&quot;/home/&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;home dirctory exits&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[[</span> ! -f <span class="s2">&quot;/home/haha&quot;</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;haha: file not exits&quot;</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">#关于数组，从0开始；普通的变量相当于是只有一个元素的数组，</span>
</span><span class='line'><span class="c">#数组元素的引用方式为 ${array[2]}；大括号是必须的；$array则相当于是${array[0]}</span>
</span><span class='line'><span class="c">#详情参见 Arrays</span>
</span><span class='line'><span class="nv">name</span><span class="o">=</span>
</span><span class='line'><span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>1;i&lt;5;i++<span class="o">))</span>; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>name<span class="o">[</span>i<span class="o">]=</span><span class="s2">&quot;a$i&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c">#输出数组中的所有元素</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">name</span><span class="p">[*]</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">name</span><span class="p">[@]</span><span class="k">}</span>
</span><span class='line'><span class="c">#输出某一项的长度</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${#</span><span class="nv">name</span><span class="p">[2]</span><span class="k">}</span>
</span><span class='line'><span class="c">#输出数组元素的个数，相当于第一个元素为空</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${#</span><span class="nv">name</span><span class="p">[*]</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#关于字符串处理，替换，拓展等</span>
</span><span class='line'><span class="c">#详细信息参见 EXPANSION Parameter Expansion</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo </span>abc<span class="o">{</span>x,y,z<span class="o">}</span>d	<span class="c">#abcxd,abcyd,abczd</span>
</span><span class='line'>
</span><span class='line'><span class="c">#最后一个数字为step，默认为1或-1，加前导0会保证数字的宽度</span>
</span><span class='line'><span class="c">#参见 Brace Expansion</span>
</span><span class='line'><span class="nb">echo</span> <span class="o">{</span>01..10..1<span class="o">}</span>	<span class="c">#01 02 03 ...</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Parameter Expansion</span>
</span><span class='line'><span class="nv">mytest</span><span class="o">=</span>aabbbbccccddaa
</span><span class='line'><span class="nv">myabc</span><span class="o">=</span>lalala
</span><span class='line'>
</span><span class='line'><span class="c">#如果未定义则用后面的代替</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">mynull</span><span class="k">:-</span><span class="nv">test</span><span class="k">}</span>	<span class="c">#test</span>
</span><span class='line'><span class="c">#代替的同时也赋值给前面的变量</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">mynull</span><span class="k">:-</span><span class="nv">test</span><span class="k">}</span>	<span class="c">#test 同时 $mynull也为test</span>
</span><span class='line'><span class="c">#如果定义则用后面的单词代替</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">myabc</span><span class="p">:+hahaha</span><span class="k">}</span>	<span class="c">#hahaha</span>
</span><span class='line'>
</span><span class='line'><span class="c">#输出子字符串</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">mytest</span><span class="p">:</span><span class="nv">0</span><span class="p">:</span><span class="nv">5</span><span class="k">}</span>	<span class="c">#从第0个字符开始输出5个字符，如果最后的长度省略，则输出到字符串末尾</span>
</span><span class='line'><span class="c">#用负数计数时 - 号必须和：有间隔</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">mytest</span><span class="p">: -1</span><span class="k">}</span>
</span><span class='line'><span class="c">#字符串长度</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${#</span><span class="nv">mytest</span><span class="k">}</span>
</span><span class='line'><span class="c">#下面的字符串删除中 # 表示从行首开始删除匹配项，%表示行尾，## %% 表示最大匹配</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">mytest</span><span class="p">#a</span><span class="k">}</span>
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">mytest</span><span class="p">##aa</span><span class="k">}</span>
</span><span class='line'><span class="c">#表示字符串替换 ${para/pattern/string} 把符合模式的字符串替换为string</span>
</span><span class='line'><span class="c">#其中 pattern 以 / 开头表示完全匹配，#开头表示匹配行首，%表示匹配行尾</span>
</span><span class='line'><span class="c">#string为空，则把相应的匹配项删除</span>
</span><span class='line'>
</span><span class='line'><span class="c">#${para^pattern}</span>
</span><span class='line'><span class="c">#大小写转换 ^ 表示大写， ’，‘ 表示小写，^^ ,, 表示最大匹配</span>
</span><span class='line'><span class="c">#如果pattern为空，则默认为 ?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令]]></title>
    <link href="http://hiberabyss.github.io/blog/20130628/linux-cmd/"/>
    <updated>2013-06-28T10:54:00+08:00</updated>
    <id>http://hiberabyss.github.io/blog/20130628/linux-cmd</id>
    <content type="html"><![CDATA[<p>本文主要是对常用的linux命令做一个总结。
<!--more--></p>

<h2 id="man">man</h2>
<p>man是使用less来显示手册页的，按h键可显示操作帮助，有如下使用技巧：</p>

<ol>
  <li>按下<code>m</code>标记位置，```可跳转到相应的标记。</li>
  <li>按下<code>！</code>可直接执行命令。</li>
</ol>

<p><code>bash
#搜索包含相应关键字的手册页
man -k keyword
</code></p>

<h2 id="who">who</h2>
<p>查看启动了多少shell。</p>

<h2 id="section">查看文件类型</h2>
<p><code>type</code>、<code>whatis</code>、<code>which</code></p>

<h2 id="ls">ls</h2>
<ul>
  <li><code>ls -I pattern</code> #过滤某些项</li>
</ul>

<h2 id="sed">sed</h2>

<p><code>bash
#替换
sed -i 's/pattern/tostring/g' /path/to/file
#插入新行
sed -i 'a GATEWAY=' /path/to/file
</code></p>
]]></content>
  </entry>
  
</feed>
